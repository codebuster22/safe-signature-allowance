/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ContractChecker,
  ContractCheckerInterface,
} from "../../../../src/SafeModule/SafeModule.sol/ContractChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "invalidContract",
        type: "address",
      },
    ],
    name: "NotAContract",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressToCheck",
        type: "address",
      },
    ],
    name: "checkIsContarct",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61014961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063ef6770c71461003a575b600080fd5b61004d6100483660046100d6565b61004f565b005b803f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470811480159061008057508015155b6100d2576040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240160405180910390fd5b5050565b6000602082840312156100e857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461010c57600080fd5b939250505056fea2646970667358221220079a0fcea754c7e96d4ed5604d1860b51a8fe06840713e085489e71556cf386b64736f6c63430008130033";

type ContractCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractChecker__factory extends ContractFactory {
  constructor(...args: ContractCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractChecker> {
    return super.deploy(overrides || {}) as Promise<ContractChecker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractChecker {
    return super.attach(address) as ContractChecker;
  }
  override connect(signer: Signer): ContractChecker__factory {
    return super.connect(signer) as ContractChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractCheckerInterface {
    return new utils.Interface(_abi) as ContractCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractChecker {
    return new Contract(address, _abi, signerOrProvider) as ContractChecker;
  }
}
