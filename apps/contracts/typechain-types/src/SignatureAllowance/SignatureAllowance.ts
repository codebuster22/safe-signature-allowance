/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SignatureAllowanceInterface extends utils.Interface {
  functions: {
    "addTokenToAllowlist(address)": FunctionFragment;
    "checkTokenAllowlisted(address)": FunctionFragment;
    "defaultToken()": FunctionFragment;
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256)": FunctionFragment;
    "expiryPeriod()": FunctionFragment;
    "getDefaultToken()": FunctionFragment;
    "getSafe()": FunctionFragment;
    "getSignatureExpiryPeriod()": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "isSignatureValid(uint256,address,bytes,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeTokenFromAllowlist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saltUsed(uint256)": FunctionFragment;
    "setNewDefaultToken(address)": FunctionFragment;
    "setNewSafe(address)": FunctionFragment;
    "setSignatureExpiryPeriod(uint256)": FunctionFragment;
    "tokensAllowed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawAllowanceDefaultToken(uint256,address,bytes,uint256,uint256)": FunctionFragment;
    "withdrawAllowanceFromToken(uint256,address,bytes,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTokenToAllowlist"
      | "checkTokenAllowlisted"
      | "defaultToken"
      | "encodeTransactionData"
      | "expiryPeriod"
      | "getDefaultToken"
      | "getSafe"
      | "getSignatureExpiryPeriod"
      | "initialize"
      | "isSignatureValid"
      | "owner"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "removeTokenFromAllowlist"
      | "renounceOwnership"
      | "saltUsed"
      | "setNewDefaultToken"
      | "setNewSafe"
      | "setSignatureExpiryPeriod"
      | "tokensAllowed"
      | "transferOwnership"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawAllowanceDefaultToken"
      | "withdrawAllowanceFromToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTokenToAllowlist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTokenAllowlisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "expiryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSignatureExpiryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSignatureValid",
    values: [
      BigNumberish,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromAllowlist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saltUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewDefaultToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setNewSafe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSignatureExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowanceDefaultToken",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowanceFromToken",
    values: [
      BigNumberish,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTokenAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignatureExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSignatureValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saltUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNewSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowanceDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowanceFromToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DefaultTokenUpdated(address)": EventFragment;
    "ExpiryPeriodUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SafeModuleInitialized()": EventFragment;
    "TargetSafeUpdated(address,address)": EventFragment;
    "TokenAllowlistAppended(address)": EventFragment;
    "TokenRemovedFromAllowlist(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiryPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeModuleInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSafeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllowlistAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemovedFromAllowlist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DefaultTokenUpdatedEventObject {
  newDefaultToken: string;
}
export type DefaultTokenUpdatedEvent = TypedEvent<
  [string],
  DefaultTokenUpdatedEventObject
>;

export type DefaultTokenUpdatedEventFilter =
  TypedEventFilter<DefaultTokenUpdatedEvent>;

export interface ExpiryPeriodUpdatedEventObject {
  newExpiryPeriod: BigNumber;
}
export type ExpiryPeriodUpdatedEvent = TypedEvent<
  [BigNumber],
  ExpiryPeriodUpdatedEventObject
>;

export type ExpiryPeriodUpdatedEventFilter =
  TypedEventFilter<ExpiryPeriodUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SafeModuleInitializedEventObject {}
export type SafeModuleInitializedEvent = TypedEvent<
  [],
  SafeModuleInitializedEventObject
>;

export type SafeModuleInitializedEventFilter =
  TypedEventFilter<SafeModuleInitializedEvent>;

export interface TargetSafeUpdatedEventObject {
  prevSafe: string;
  newSafe: string;
}
export type TargetSafeUpdatedEvent = TypedEvent<
  [string, string],
  TargetSafeUpdatedEventObject
>;

export type TargetSafeUpdatedEventFilter =
  TypedEventFilter<TargetSafeUpdatedEvent>;

export interface TokenAllowlistAppendedEventObject {
  newToken: string;
}
export type TokenAllowlistAppendedEvent = TypedEvent<
  [string],
  TokenAllowlistAppendedEventObject
>;

export type TokenAllowlistAppendedEventFilter =
  TypedEventFilter<TokenAllowlistAppendedEvent>;

export interface TokenRemovedFromAllowlistEventObject {
  removedToken: string;
}
export type TokenRemovedFromAllowlistEvent = TypedEvent<
  [string],
  TokenRemovedFromAllowlistEventObject
>;

export type TokenRemovedFromAllowlistEventFilter =
  TypedEventFilter<TokenRemovedFromAllowlistEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SignatureAllowance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignatureAllowanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isAllowlisted: boolean }>;

    defaultToken(overrides?: CallOverrides): Promise<[string]>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hashData: string }>;

    expiryPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDefaultToken(
      overrides?: CallOverrides
    ): Promise<[string] & { _defaultToken: string }>;

    getSafe(overrides?: CallOverrides): Promise<[string] & { _safe: string }>;

    getSignatureExpiryPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _expiryPeriod: BigNumber }>;

    initialize(
      _safe: string,
      _defaultToken: string,
      _expiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isValid: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    saltUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokensAllowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addTokenToAllowlist(
    _newToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkTokenAllowlisted(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  defaultToken(overrides?: CallOverrides): Promise<string>;

  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  expiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getDefaultToken(overrides?: CallOverrides): Promise<string>;

  getSafe(overrides?: CallOverrides): Promise<string>;

  getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _safe: string,
    _defaultToken: string,
    _expiryPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isSignatureValid(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _token: string,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeTokenFromAllowlist(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  saltUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  setNewDefaultToken(
    _newDefaultToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNewSafe(
    _newSafe: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSignatureExpiryPeriod(
    _newExpiryPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokensAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllowanceDefaultToken(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllowanceFromToken(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _token: string,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    defaultToken(overrides?: CallOverrides): Promise<string>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    expiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultToken(overrides?: CallOverrides): Promise<string>;

    getSafe(overrides?: CallOverrides): Promise<string>;

    getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _safe: string,
      _defaultToken: string,
      _expiryPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saltUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewSafe(_newSafe: string, overrides?: CallOverrides): Promise<void>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "DefaultTokenUpdated(address)"(
      newDefaultToken?: null
    ): DefaultTokenUpdatedEventFilter;
    DefaultTokenUpdated(newDefaultToken?: null): DefaultTokenUpdatedEventFilter;

    "ExpiryPeriodUpdated(uint256)"(
      newExpiryPeriod?: null
    ): ExpiryPeriodUpdatedEventFilter;
    ExpiryPeriodUpdated(newExpiryPeriod?: null): ExpiryPeriodUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SafeModuleInitialized()"(): SafeModuleInitializedEventFilter;
    SafeModuleInitialized(): SafeModuleInitializedEventFilter;

    "TargetSafeUpdated(address,address)"(
      prevSafe?: null,
      newSafe?: null
    ): TargetSafeUpdatedEventFilter;
    TargetSafeUpdated(
      prevSafe?: null,
      newSafe?: null
    ): TargetSafeUpdatedEventFilter;

    "TokenAllowlistAppended(address)"(
      newToken?: null
    ): TokenAllowlistAppendedEventFilter;
    TokenAllowlistAppended(newToken?: null): TokenAllowlistAppendedEventFilter;

    "TokenRemovedFromAllowlist(address)"(
      removedToken?: null
    ): TokenRemovedFromAllowlistEventFilter;
    TokenRemovedFromAllowlist(
      removedToken?: null
    ): TokenRemovedFromAllowlistEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSafe(overrides?: CallOverrides): Promise<BigNumber>;

    getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _safe: string,
      _defaultToken: string,
      _expiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    saltUsed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokensAllowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDefaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSignatureExpiryPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _safe: string,
      _defaultToken: string,
      _expiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    saltUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokensAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
