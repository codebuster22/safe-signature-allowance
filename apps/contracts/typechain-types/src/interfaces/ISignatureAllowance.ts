/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ISignatureAllowanceInterface extends utils.Interface {
  functions: {
    "addTokenToAllowlist(address)": FunctionFragment;
    "checkTokenAllowlisted(address)": FunctionFragment;
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256)": FunctionFragment;
    "getDefaultToken()": FunctionFragment;
    "getSafe()": FunctionFragment;
    "getSignatureExpiryPeriod()": FunctionFragment;
    "isSignatureValid(uint256,address,bytes,address,uint256,uint256)": FunctionFragment;
    "removeTokenFromAllowlist(address)": FunctionFragment;
    "setNewDefaultToken(address)": FunctionFragment;
    "setNewSafe(address)": FunctionFragment;
    "setSignatureExpiryPeriod(uint256)": FunctionFragment;
    "withdrawAllowanceDefaultToken(uint256,address,bytes,uint256,uint256)": FunctionFragment;
    "withdrawAllowanceFromToken(uint256,address,bytes,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTokenToAllowlist"
      | "checkTokenAllowlisted"
      | "encodeTransactionData"
      | "getDefaultToken"
      | "getSafe"
      | "getSignatureExpiryPeriod"
      | "isSignatureValid"
      | "removeTokenFromAllowlist"
      | "setNewDefaultToken"
      | "setNewSafe"
      | "setSignatureExpiryPeriod"
      | "withdrawAllowanceDefaultToken"
      | "withdrawAllowanceFromToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTokenToAllowlist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTokenAllowlisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSignatureExpiryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSignatureValid",
    values: [
      BigNumberish,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromAllowlist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewDefaultToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setNewSafe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSignatureExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowanceDefaultToken",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowanceFromToken",
    values: [
      BigNumberish,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTokenAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignatureExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSignatureValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNewSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowanceDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowanceFromToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISignatureAllowance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISignatureAllowanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isAllowlisted: boolean }>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hashData: string }>;

    getDefaultToken(
      overrides?: CallOverrides
    ): Promise<[string] & { _defaultToken: string }>;

    getSafe(overrides?: CallOverrides): Promise<[string] & { _safe: string }>;

    getSignatureExpiryPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _expiryPeriod: BigNumber }>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isValid: boolean }>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addTokenToAllowlist(
    _newToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkTokenAllowlisted(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefaultToken(overrides?: CallOverrides): Promise<string>;

  getSafe(overrides?: CallOverrides): Promise<string>;

  getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  isSignatureValid(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _token: string,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTokenFromAllowlist(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNewDefaultToken(
    _newDefaultToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNewSafe(
    _newSafe: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSignatureExpiryPeriod(
    _newExpiryPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllowanceDefaultToken(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllowanceFromToken(
    _amount: BigNumberish,
    _withdrawer: string,
    _signatures: BytesLike,
    _token: string,
    _creationTime: BigNumberish,
    _salt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefaultToken(overrides?: CallOverrides): Promise<string>;

    getSafe(overrides?: CallOverrides): Promise<string>;

    getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewSafe(_newSafe: string, overrides?: CallOverrides): Promise<void>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSafe(overrides?: CallOverrides): Promise<BigNumber>;

    getSignatureExpiryPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenToAllowlist(
      _newToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkTokenAllowlisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSignatureExpiryPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignatureValid(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTokenFromAllowlist(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNewDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNewSafe(
      _newSafe: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSignatureExpiryPeriod(
      _newExpiryPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllowanceDefaultToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllowanceFromToken(
      _amount: BigNumberish,
      _withdrawer: string,
      _signatures: BytesLike,
      _token: string,
      _creationTime: BigNumberish,
      _salt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
